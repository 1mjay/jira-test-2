name: Create Jira issue
on:
  issues:
    types:
      - opened
jobs:
  create-issue:
    name: Create Jira issue
    runs-on: ubuntu-latest
    steps:
      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      - name: Parse Issue Form
        uses: stefanbuck/github-issue-praser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/issue_form.yml

      - name: Log Parsed Values
        run: |
          echo "Parsed Issue Form Values:"
          echo "Epic: ${{ steps.issue-parser.outputs.epic }}"
          echo "Branch: ${{ steps.issue-parser.outputs.branch }}"
          echo "Feature: ${{ steps.issue-parser.outputs.feature }}"

      - name: Convert Markdown to Jira Syntax
        uses: peter-evans/jira2md@v1
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issue.html_url }}

            ${{ github.event.issue.body }}
          mode: md2jira

      - name: Create Jira Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          project: SCRUM
          issuetype: Story
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "customfield_10006": "${{ steps.issue-parser.outputs.epic }}",
              "customfield_10037": "${{ github.actor }}"
            }

      - name: Log Create Issue Result
        if: always()
        run: |
          echo "Create Issue result:"
          echo "Outputs: ${{ toJSON(steps.create.outputs) }}"
          echo "Error: ${{ steps.create.error }}"

      - name: Create Branch
        run: |
          TICKET_NUMBER="${{ steps.create.outputs.issue }}"
          BRANCH_INPUT="${{ steps.issue-parser.outputs.branch }}"
          
          # 브랜치 이름 구성
          BRANCH_NAME="${BRANCH_INPUT}/${TICKET_NUMBER}"
          echo "Generated Branch Name: ${BRANCH_NAME}"

          # 브랜치 생성 및 푸시
          git checkout -b "${BRANCH_NAME}"
          git push origin "${BRANCH_NAME}"
